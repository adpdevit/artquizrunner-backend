openapi: 3.0.1
info:
  title: ArtQuiz Backend definition
  version: v1
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/admin/question:
    post:
      tags:
        - Admin
      operationId: addQuestion
      description: Send a new question available in game
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QuestionFull'
      responses:
        '201':
          description: Created - Cookie / Header contains game state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionFull'
        '400':
          description: wrong schem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDescription'
    get:
      tags:
        - Admin
      operationId: getAllQuestions
      description: Get all questions available in game
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QuestionFull'
        '400':
          description: wrong schem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDescription'
  /api/admin/question/{id}:
    delete:
      tags:
        - Admin
      operationId: deleteQuestionById
      description: Delete question identified by given ID
      parameters:
        - name: id
          in: path
          description: 'The comment that needs to be fetched.'
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuestionFull'
  /api/player/quiz/state:
    get:
      tags:
        - Quiz
      operationId: getInitialQuizState
      description: Get initial quiz state
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: the username of the player
      responses:
        '200':
          description: OK - Cookie / Header contains quiz state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizState'
  /api/player/quiz/answer:
    post:
      tags:
        - Quiz
      operationId: handlePlayerChoice
      description: Send the curent player choice
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerAnswer'
      responses:
        '200':
          description: OK - Cookie / Header contains game state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QuizState'
        '400':
          description: Missing JWT state or wrong schem
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDescription'
  /api/score/best:
    get:
      tags:
        - Score
      operationId: getBestScores
      description: get last X best player scores
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            format: int32
          description: the number of scores to get
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Score'
components: {
  schemas: {
    QuizState: {
      type: object,
      properties: {
        username: {
          type: string
        },
        nextQuestion: {
          $ref: '#/components/schemas/Question'
        },
        gameState: {
          $ref: '#/components/schemas/GameState'
        }
      }
    },
    GameState: {
      type: object,
      properties: {
        currentPoints: {
          type: integer,
          format: int64
        },
        endState: {
          type: integer,
          format: int64
        },
        goodInARow: {
          type: integer,
          format: int64
        },
        badInARow: {
          type: integer,
          format: int64
        }
      }
    },
    QuestionFull: {
      type: object,
      properties: {
        id: {
          type: integer,
          format: int64
        },
        description: {
          type: string
        },
        options: {
          type: array,
          items: {
            $ref: '#/components/schemas/AnswerOptionFull'
          }
        }
      }
    },
    Question: {
      type: object,
      properties: {
        id: {
          type: integer,
          format: int64
        },
        description: {
          type: string
        },
        options: {
          type: array,
          items: {
            $ref: '#/components/schemas/AnswerOption'
          }
        }
      }
    },
    PlayerAnswer: {
      type: object,
      properties: {
        chosenOption: {
          $ref: '#/components/schemas/AnswerOption'
        }
      }
    },
    AnswerOptionFull: {
      type: object,
      properties: {
        id: {
          type: integer,
          format: int64
        },
        description: {
          type: string
        },
        isCorrect: {
          type: boolean
        }
      }
    },
    AnswerOption: {
      type: object,
      properties: {
        id: {
          type: integer,
          format: int64
        },
        description: {
          type: string
        }
      }
    },
    ErrorDescription: {
      type: object,
      properties: {
        title: {
          type: string
        },
        description: {
          type: string
        }
      }
    },
    Score: {
      type: object,
      properties: {
        id: {
          type: integer,
          format: int64
        },
        username: {
          type: string
        },
        score: {
          type: integer,
          format: int64
        }
      }
    }
  }
}
